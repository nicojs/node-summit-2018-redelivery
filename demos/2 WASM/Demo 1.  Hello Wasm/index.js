// calling an empty module from JavaScript

WebAssembly.instantiate(new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00
])).then(function(wasm) {
    console.log("success");
});


// calling a function inside WASM
/*
0x0a // code section
0x0a // the size of the rest of the section
0x01 // the number of function bodies
0x08 // the size of the first function body
0x00 // the number of local variables
0x20 0x00 // load first argument onto the stack
0x20 0x01 // load second argument onto the stack
0x6a // replace the two topmost values on the stack with their sum
0x0f // return the value on top of the stack
0x0b // end
*/

var bytecode = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x07, 0x01, 0x60, 0x02, 0x7f, 0x7f, 0x01,
    0x7f, 0x03, 0x02, 0x01, 0x00, 0x07, 0x07, 0x01,
    0x03, 0x73, 0x75, 0x6d, 0x00, 0x00, 0x0a, 0x0a,
    0x01, 0x08, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a,
    0x0f, 0x0b
  ]);

WebAssembly.instantiate(bytecode).then(function(wasm) {
    console.log(wasm.instance.exports.sum(1, 2))
});



// Calling a function inside WASM, that calls the 
// log10 function from JavaScript
WebAssembly.instantiate(new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x0b, 0x02, 0x60, 0x01, 0x7f, 0x01, 0x7f,
    0x60, 0x01, 0x7c , 0x01, 0x7c, 0x02, 0x0e, 0x01,
    0x04, 0x6d, 0x61, 0x74, 0x68, 0x05, 0x6c, 0x6f,
    0x67, 0x31, 0x30, 0x00, 0x01, 0x03, 0x02, 0x01,
    0x00, 0x07, 0x0a, 0x01, 0x06, 0x64, 0x69, 0x67,
    0x69, 0x74, 0x73, 0x00, 0x01, 0x0a, 0x10, 0x01,
    0x0e, 0x00, 0x20, 0x00, 0xb7, 0x41, 0x01, 0xb7,
    0xa0, 0x10, 0x00, 0x9b, 0xaa, 0x0f, 0x0b
]), {
    'math': Math
}).then(function(wasm) {
    var result = wasm.instance.exports.digits(42); // returns 2
    console.log(result);
});